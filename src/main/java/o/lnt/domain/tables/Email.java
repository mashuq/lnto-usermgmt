/*
 * This file is generated by jOOQ.
 */
package o.lnt.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import o.lnt.domain.DefaultSchema;
import o.lnt.domain.Indexes;
import o.lnt.domain.tables.records.EmailRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Email extends TableImpl<EmailRecord> {

    private static final long serialVersionUID = 973113071;

    /**
     * The reference instance of <code>email</code>
     */
    public static final Email EMAIL = new Email();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailRecord> getRecordType() {
        return EmailRecord.class;
    }

    /**
     * The column <code>email.EmailID</code>.
     */
    public final TableField<EmailRecord, Integer> EMAILID = createField("EmailID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>email.AddressType</code>.
     */
    public final TableField<EmailRecord, String> ADDRESSTYPE = createField("AddressType", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>email.EmailAddress</code>.
     */
    public final TableField<EmailRecord, String> EMAILADDRESS = createField("EmailAddress", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>email.PersonID</code>.
     */
    public final TableField<EmailRecord, Integer> PERSONID = createField("PersonID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>email.IsDefault</code>.
     */
    public final TableField<EmailRecord, Byte> ISDEFAULT = createField("IsDefault", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>email</code> table reference
     */
    public Email() {
        this(DSL.name("email"), null);
    }

    /**
     * Create an aliased <code>email</code> table reference
     */
    public Email(String alias) {
        this(DSL.name(alias), EMAIL);
    }

    /**
     * Create an aliased <code>email</code> table reference
     */
    public Email(Name alias) {
        this(alias, EMAIL);
    }

    private Email(Name alias, Table<EmailRecord> aliased) {
        this(alias, aliased, null);
    }

    private Email(Name alias, Table<EmailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMAIL_FK_PHONE_PERSON0, Indexes.EMAIL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EmailRecord, Integer> getIdentity() {
        return Internal.createIdentity(o.lnt.domain.tables.Email.EMAIL, o.lnt.domain.tables.Email.EMAIL.EMAILID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmailRecord> getPrimaryKey() {
        return Internal.createUniqueKey(o.lnt.domain.tables.Email.EMAIL, "KEY_email_PRIMARY", o.lnt.domain.tables.Email.EMAIL.EMAILID, o.lnt.domain.tables.Email.EMAIL.PERSONID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmailRecord>> getKeys() {
        return Arrays.<UniqueKey<EmailRecord>>asList(
              Internal.createUniqueKey(o.lnt.domain.tables.Email.EMAIL, "KEY_email_PRIMARY", o.lnt.domain.tables.Email.EMAIL.EMAILID, o.lnt.domain.tables.Email.EMAIL.PERSONID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Email as(String alias) {
        return new Email(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Email as(Name alias) {
        return new Email(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Email rename(String name) {
        return new Email(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Email rename(Name name) {
        return new Email(name, null);
    }
}
