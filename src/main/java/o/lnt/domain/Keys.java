/*
 * This file is generated by jOOQ.
 */
package o.lnt.domain;


import javax.annotation.Generated;

import o.lnt.domain.tables.Address;
import o.lnt.domain.tables.Email;
import o.lnt.domain.tables.Person;
import o.lnt.domain.tables.Phone;
import o.lnt.domain.tables.records.AddressRecord;
import o.lnt.domain.tables.records.EmailRecord;
import o.lnt.domain.tables.records.PersonRecord;
import o.lnt.domain.tables.records.PhoneRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>lnto_usermgmt</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AddressRecord, Integer> IDENTITY_ADDRESS = Identities0.IDENTITY_ADDRESS;
    public static final Identity<EmailRecord, Integer> IDENTITY_EMAIL = Identities0.IDENTITY_EMAIL;
    public static final Identity<PersonRecord, Integer> IDENTITY_PERSON = Identities0.IDENTITY_PERSON;
    public static final Identity<PhoneRecord, Integer> IDENTITY_PHONE = Identities0.IDENTITY_PHONE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AddressRecord> KEY_ADDRESS_PRIMARY = UniqueKeys0.KEY_ADDRESS_PRIMARY;
    public static final UniqueKey<EmailRecord> KEY_EMAIL_PRIMARY = UniqueKeys0.KEY_EMAIL_PRIMARY;
    public static final UniqueKey<PersonRecord> KEY_PERSON_PRIMARY = UniqueKeys0.KEY_PERSON_PRIMARY;
    public static final UniqueKey<PhoneRecord> KEY_PHONE_PRIMARY = UniqueKeys0.KEY_PHONE_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, PersonRecord> FK_PHONE_PERSON00 = ForeignKeys0.FK_PHONE_PERSON00;
    public static final ForeignKey<EmailRecord, PersonRecord> FK_PHONE_PERSON0 = ForeignKeys0.FK_PHONE_PERSON0;
    public static final ForeignKey<PhoneRecord, PersonRecord> FK_PHONE_PERSON = ForeignKeys0.FK_PHONE_PERSON;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AddressRecord, Integer> IDENTITY_ADDRESS = Internal.createIdentity(Address.ADDRESS, Address.ADDRESS.ADDRESSID);
        public static Identity<EmailRecord, Integer> IDENTITY_EMAIL = Internal.createIdentity(Email.EMAIL, Email.EMAIL.EMAILID);
        public static Identity<PersonRecord, Integer> IDENTITY_PERSON = Internal.createIdentity(Person.PERSON, Person.PERSON.PERSONID);
        public static Identity<PhoneRecord, Integer> IDENTITY_PHONE = Internal.createIdentity(Phone.PHONE, Phone.PHONE.PHONEID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AddressRecord> KEY_ADDRESS_PRIMARY = Internal.createUniqueKey(Address.ADDRESS, "KEY_address_PRIMARY", Address.ADDRESS.ADDRESSID, Address.ADDRESS.PERSONID);
        public static final UniqueKey<EmailRecord> KEY_EMAIL_PRIMARY = Internal.createUniqueKey(Email.EMAIL, "KEY_email_PRIMARY", Email.EMAIL.EMAILID, Email.EMAIL.PERSONID);
        public static final UniqueKey<PersonRecord> KEY_PERSON_PRIMARY = Internal.createUniqueKey(Person.PERSON, "KEY_person_PRIMARY", Person.PERSON.PERSONID);
        public static final UniqueKey<PhoneRecord> KEY_PHONE_PRIMARY = Internal.createUniqueKey(Phone.PHONE, "KEY_phone_PRIMARY", Phone.PHONE.PHONEID, Phone.PHONE.PERSONID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AddressRecord, PersonRecord> FK_PHONE_PERSON00 = Internal.createForeignKey(o.lnt.domain.Keys.KEY_PERSON_PRIMARY, Address.ADDRESS, "fk_Phone_Person00", Address.ADDRESS.PERSONID);
        public static final ForeignKey<EmailRecord, PersonRecord> FK_PHONE_PERSON0 = Internal.createForeignKey(o.lnt.domain.Keys.KEY_PERSON_PRIMARY, Email.EMAIL, "fk_Phone_Person0", Email.EMAIL.PERSONID);
        public static final ForeignKey<PhoneRecord, PersonRecord> FK_PHONE_PERSON = Internal.createForeignKey(o.lnt.domain.Keys.KEY_PERSON_PRIMARY, Phone.PHONE, "fk_Phone_Person", Phone.PHONE.PERSONID);
    }
}
