/*
 * This file is generated by jOOQ.
 */
package o.lnt.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import o.lnt.domain.DefaultSchema;
import o.lnt.domain.Indexes;
import o.lnt.domain.tables.records.PhoneRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Phone extends TableImpl<PhoneRecord> {

    private static final long serialVersionUID = -1159596471;

    /**
     * The reference instance of <code>phone</code>
     */
    public static final Phone PHONE = new Phone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhoneRecord> getRecordType() {
        return PhoneRecord.class;
    }

    /**
     * The column <code>phone.PhoneID</code>.
     */
    public final TableField<PhoneRecord, Integer> PHONEID = createField("PhoneID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>phone.AddressType</code>.
     */
    public final TableField<PhoneRecord, String> ADDRESSTYPE = createField("AddressType", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>phone.PhoneNumber</code>.
     */
    public final TableField<PhoneRecord, String> PHONENUMBER = createField("PhoneNumber", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>phone.PersonID</code>.
     */
    public final TableField<PhoneRecord, Integer> PERSONID = createField("PersonID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>phone.IsDefault</code>.
     */
    public final TableField<PhoneRecord, Byte> ISDEFAULT = createField("IsDefault", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>phone</code> table reference
     */
    public Phone() {
        this(DSL.name("phone"), null);
    }

    /**
     * Create an aliased <code>phone</code> table reference
     */
    public Phone(String alias) {
        this(DSL.name(alias), PHONE);
    }

    /**
     * Create an aliased <code>phone</code> table reference
     */
    public Phone(Name alias) {
        this(alias, PHONE);
    }

    private Phone(Name alias, Table<PhoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Phone(Name alias, Table<PhoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PHONE_FK_PHONE_PERSON, Indexes.PHONE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PhoneRecord, Integer> getIdentity() {
        return Internal.createIdentity(o.lnt.domain.tables.Phone.PHONE, o.lnt.domain.tables.Phone.PHONE.PHONEID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PhoneRecord> getPrimaryKey() {
        return Internal.createUniqueKey(o.lnt.domain.tables.Phone.PHONE, "KEY_phone_PRIMARY", o.lnt.domain.tables.Phone.PHONE.PHONEID, o.lnt.domain.tables.Phone.PHONE.PERSONID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PhoneRecord>> getKeys() {
        return Arrays.<UniqueKey<PhoneRecord>>asList(
              Internal.createUniqueKey(o.lnt.domain.tables.Phone.PHONE, "KEY_phone_PRIMARY", o.lnt.domain.tables.Phone.PHONE.PHONEID, o.lnt.domain.tables.Phone.PHONE.PERSONID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Phone as(String alias) {
        return new Phone(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Phone as(Name alias) {
        return new Phone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(String name) {
        return new Phone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Phone rename(Name name) {
        return new Phone(name, null);
    }
}
